pub type Pattern = [(u8, bool)];

pub fn compare(data: *const u8, pattern: &Pattern) -> bool {
	for i in 0..pattern.len() {
		let (b, m) = pattern[i];

		unsafe {
			if m && *data.offset(i as isize) != b {
				return false;
			}
		}
	}

	true
}

// engine
pattern!(Cbuf_AddText
	0x8B 0x54 0x24 0x04 0x83 0xC9 0xFF 0x57 0x33 0xC0 0x8B 0xFA 0xF2 0xAE 0x8B 0x3D ?? ?? ?? ?? 0xA1 ?? ?? ?? ?? 0xF7 0xD1 0x49 0x03 0xCF 0x3B 0xC8
);

pattern!(Host_Spawn_f
	0xA1 ?? ?? ?? ?? 0x53 0xBB 0x01 0x00 0x00 0x00 0x3B 0xC3 0x56 0x75 0x11 0x68 ?? ?? ?? ?? 0xFF 0x15 ?? ?? ?? ?? 0x83 0xC4 0x04 0x5E 0x5B
);

pattern!(Host_UnPause_f
	0xA0 ?? ?? ?? ?? 0x84 0xC0 0x74 0x59 0x8B 0x0D ?? ?? ?? ?? 0xB8 0x01 0x00 0x00 0x00 0x3B 0xC8 0x75 0x0A 0x50 0xE8
);

pattern!(ConCommand_constructor
	0x8B 0x44 0x24 0x08 0x33 0xD2 0x56 0x8B 0xF1 0x89 0x46 0x18 0x8B 0x44 0x24 0x18 0x3B 0xC2 0x88 0x56 0x08 0x89 0x56 0x0C 0x89 0x56 0x10 0x89 0x56 0x14 0x89 0x56 0x04 0xC7 0x06
);

// server
pattern!(CHL1GameMovement__CheckJumpButton
	0x83 0xEC 0x14 0x53 0x56 0x8B 0xF1 0x57 0x8B 0x7E 0x08 0x85 0xFF 0x74 0x12 0x8B 0x07 0x8B 0xCF 0xFF 0x90 0x60 0x01 0x00 0x00 0x84 0xC0 0x74 0x04 0x8B 0xCF 0xEB
);

pattern!(CGameMovement__FinishGravity
	0x8B 0x51 0x08 0xD9 0x82 0xB0 0x0B 0x00 0x00 0xD8 0x1D ?? ?? ?? ?? 0xDF 0xE0 0xF6 0xC4 0x44 0x7A 0x4D 0xD9 0x82 0x08 0x02 0x00 0x00 0xD8 0x1D
);
